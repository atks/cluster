#!/usr/bin/perl -w

# The MIT License
#
# Copyright (c) 2014 Adrian Tan <atks@umich.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use strict;
use warnings;

my $executablePath = __FILE__;
$executablePath =~ s/[^\/]+$//;
my $defaultUser = "atks";
my $configFile = $executablePath . ".config";
if (-e $configFile)
{
    open(IN, $configFile) || die "Cannot open config file";
    $defaultUser = <IN>;
    chomp($defaultUser);
    close(IN);   
}
my $acct = @ARGV==1 ? $ARGV[0] : $defaultUser;

my %LOG;

my %TNODE = ();
open(IN, "/net/fantasia/home/atks/programs/cluster/good_node_list.txt");
while(<IN>)
{
    chomp;
    my ($node, $newNode) = split("\t");
    $TNODE{$newNode} = $node;
}
close(IN);


for my $gateway ("fantasia", "wonderland", "snowwhite", "slurm", "1000g", "assembly", "bipolar", "psoriasis", "t2dgenes", "got2d", "hunt", "amd", "sardinia", "twins", "esp")
{
    my $cmd = "";
    if ($gateway eq "slurm")
    {
        $cmd = "squeue | tail -n +2 | tr -s ' ' '\\t'  | cut -f2,5,9 | perl -lane '{print \"\$F[1]\\t\$F[0]\\t\$F[2]\"}'";
    }
    else
    {
        $cmd = "ssh $acct@" . $gateway . " 'mosps -eu | tail -n +2'";
    }
    
    my %MINI_LOG = ();
    my $c = `$cmd`;
    my @jobs = split("\n", $c);
        
    for my $job (@jobs)
    {
        my ($user, $pid, $node, $rest) = split(/\s+/, $job);

        if ($gateway eq "slurm")
        {   
            if ($node eq "(None)")
            {
                next;
            }
            
            if (!exists($TNODE{$node})) 
            {
                my $cmd1 = "ssh $acct\@" . "fantasia \"mosctl whois $node\"";
                
                print $cmd1 . "\n";
                my $newNode = `$cmd1`;
                $TNODE{$node} = $newNode;
                $node = $newNode;
            }
            else
            {
                $node = $TNODE{$node}; 
            }
        }
    
        ++$MINI_LOG{$user};

        if ($gateway =~ /(fantasia|wonderland|snowwhite|slurm)/)
        {
            if ($gateway eq "slurm")
            {
                $user = "#$user";
            }
            ++$LOG{$user};
        }
    }

    print "$gateway\n";
    if (scalar(keys(%MINI_LOG))==0)
    {
        printf("\t                    0 jobs\n");
    }
    else
    {
        for my $user (keys(%MINI_LOG))
        {
            printf("\t%10s %10d jobs\n", $user, $MINI_LOG{$user});
        }
    }
    print "\n";
   
    if ($gateway eq "slurm")
    {
        print "\t**************************\n";
        print "\t       MAIN CLUSTER       \n";
        print "\t**************************\n";

        if (scalar(keys(%LOG))==0)
        {
            printf("\t                    0 jobs\n");
        }
        else
        {
            my $totalJobs = 0;
            for my $user (keys(%LOG))
            {
                printf("\t%10s %10d jobs\n", $user, $LOG{$user});
                $totalJobs += $LOG{$user};
            }
            print "\t==========================\n";
            printf("\t%10s %10d jobs\n", "total", $totalJobs);
            print "\n";
            print "\t# - slurm managed\n";    
            print "\n";
        }
    }    
}
