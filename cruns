#!/usr/bin/perl -w

# The MIT License
#
# Copyright (c) 2014 Adrian Tan <atks@umich.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use strict;
use warnings;

my $executablePath = __FILE__;
$executablePath =~ s/[^\/]+$//;
my $defaultUser = "atks";
my $configFile = $executablePath . ".config";
if (-e $configFile)
{
    open(IN, $configFile) || die "Cannot open config file";
    $defaultUser = <IN>;
    chomp($defaultUser);
    close(IN);
}
else
{
    print STDERR "Please create a .config file containing your user name in the directory of cluster tools.\n";
    exit(1);
}

my $usr;
my $target_usr;
my $unordered = 0;

if (@ARGV==0)
{
    $usr = $defaultUser;
    $target_usr = $defaultUser;
}
elsif (@ARGV==1)
{
    if ($ARGV[0] eq "-u")
    {
        $unordered = 1;
        $usr = $defaultUser;
        $target_usr = $defaultUser;
    }
    else
    {    
        $usr = $defaultUser;
        $target_usr = $ARGV[0];
    }
}

my @gateways = ("slurm", "fantasia", "wonderland", "snowwhite", "dumbo", "sardinia", "bipolar", "esp");

#translates mnode to snode
my %TNODE = ();
my %LOG = ();
my %ULOG = ();
my @NODES = ();
open(IN, $executablePath . "good_node_list.txt");
while(<IN>)
{
    chomp;
    my ($mnode, $snode) = split("\t");
    $TNODE{$mnode} = $snode;
    $LOG{$snode} = 0;
    $ULOG{$snode} = 0;
    push(@NODES, $snode);
}

close(IN);

my $total = 0;
my $userTotal = 0;

#count jobs
for my $gateway (@gateways)
{
    my $cmd;
    my $c;
    my $miniCluster = "";
    if ($gateway eq "slurm")
    {
        $cmd = "squeue | tail -n +2 | tr -s ' ' '\\t'  | cut -f5,9,2 | perl -lane '{print \"\$F[1]\\t\$F[0]\\t\$F[2]\"}'";
        $c = `$cmd`;
    }
    elsif ($gateway =~ /(fantasia|wonderland|snowwhite|dumbo)/)
    {
        $cmd = "ssh $usr@" . $gateway . " 'mosps -eu | tail -n +2'";
        $c = `$cmd`;
    }
    else #miniclusters under mosix
    {
        $cmd = "ssh $usr@" . $gateway . " 'mosps -eu | tail -n +2'";
        $miniCluster = "$gateway-";
        $c = `$cmd`;
    }

    my @jobs = split("\n", $c);
    for my $job (@jobs)
    {
        my ($user, $jobid, $node, $rest) = split(/\s+/, $job);

        $node = $node eq "here" ? $gateway : "$miniCluster$node";

        if ($node=~/^\(job/)
        {
            $node = "rescheduling";
        }

        #weird case
        if ($node eq "")
        {
            next;
        }

        if ($gateway ne "slurm")
        {
            if (!exists($TNODE{$node}))
            {
               print STDERR "missing $node in translation\n";
               print STDERR "gateway: $gateway\n";
               print STDERR "job: $job\n";
               $LOG{$node} = 0;
               $ULOG{$node} = 0;
               $TNODE{$node} = $node;
               push(@NODES, $node);
            }
            else
            {
                $node = $TNODE{$node};
            }
        }
        else
        {
            if (!exists($ULOG{$node}))
            {
               print STDERR "missing $node in slurm\n";
               print STDERR "$job\n";
               $LOG{$node} = 0;
               $ULOG{$node} = 0;
               $TNODE{$node} = $node;
               push(@NODES, $node);
            }
        }

        #print "CHECK: $gateway, $user, $node\n";

        if ($user eq $target_usr)
        {
            ++$ULOG{$node};
            ++$userTotal;
        }

        ++$LOG{$node};
        ++$total;
    }
}

if (!$unordered)
{
    print "\n";
    printf("\t%25s    usr(sum)   %25s    usr(sum)   %25s    usr(sum)\n", "node", "node", "node");
    my $i = 0;
    for my $node (sort {$LOG{$b} <=> $LOG{$a}} keys(%LOG))
    {
        print "\n" if ($i!=0 && $i%3==0);
        printf("\t%25s  %4d(%4d)", $node, $ULOG{$node}, $LOG{$node});
    
        ++$i;
    }
    print "\n\n";
    printf("\t%8s: %d jobs\n", $target_usr, $userTotal);
    printf("\t   total: %4d jobs\n\n", $total);
}
else
{
    print "\n";
    printf("\t%25s    usr(sum)   %25s    usr(sum)   %25s    usr(sum)\n", "node", "node", "node");
    my $i = 0;
    for my $node (@NODES)
    {
        print "\n" if ($i!=0 && $i%3==0);
        printf("\t%25s  %4d(%4d)", $node, $ULOG{$node}, $LOG{$node});
    
        ++$i;
    }
    print "\n\n";
    printf("\t%8s: %d jobs\n", $target_usr, $userTotal);
    printf("\t   total: %4d jobs\n\n", $total);
}